{"ast":null,"code":"import _regeneratorRuntime from \"G:\\\\learning\\\\hooks\\\\hooks-fetch-data\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"G:\\\\learning\\\\hooks\\\\hooks-fetch-data\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"G:\\\\learning\\\\hooks\\\\hooks-fetch-data\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"G:\\\\learning\\\\hooks\\\\hooks-fetch-data\\\\src\\\\index.js\";\nimport React, { Fragment, useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport './styles.css';\n\nfunction App() {\n  var _useState = useState({\n    hits: []\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState('redux'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      query = _useState4[0],\n      setQuery = _useState4[1];\n\n  var _useState5 = useState('redux'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      search = _useState6[0],\n      setSearch = _useState6[1];\n\n  var _useState7 = useState('http://hn.algolia.com/api/v1/search?query=redux'),\n      _useState8 = _slicedToArray(_useState7, 2),\n      url = _useState8[0],\n      setUrl = _useState8[1];\n\n  useEffect(function () {\n    var fetchData =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios( // 'http://hn.algolia.com/api/v1/search?query=redux'\n                // `http://hn.algolia.com/api/v1/search?query=${query}`\n                \"http://hn.algolia.com/api/v1/search?query=\".concat(search));\n\n              case 2:\n                result = _context.sent;\n                console.log(result);\n                setData(result.data);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n  }, [search]);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    value: query,\n    onChange: function onChange(event) {\n      return setQuery(event.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return setSearch(query);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"Search\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, data.hits.map(function (item) {\n    return React.createElement(\"li\", {\n      key: item.objectID,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: item.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, item.title));\n  })));\n}\n\nvar rootElement = document.getElementById('root');\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["G:\\learning\\hooks\\hooks-fetch-data\\src\\index.js"],"names":["React","Fragment","useState","useEffect","ReactDOM","axios","App","hits","data","setData","query","setQuery","search","setSearch","url","setUrl","fetchData","result","console","log","event","target","value","map","item","objectID","title","rootElement","document","getElementById","render"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,cAAP;;AAEA,SAASC,GAAT,GAAe;AAAA,kBACWJ,QAAQ,CAAC;AAAEK,IAAAA,IAAI,EAAE;AAAR,GAAD,CADnB;AAAA;AAAA,MACNC,IADM;AAAA,MACAC,OADA;;AAAA,mBAEaP,QAAQ,CAAC,OAAD,CAFrB;AAAA;AAAA,MAENQ,KAFM;AAAA,MAECC,QAFD;;AAAA,mBAGeT,QAAQ,CAAC,OAAD,CAHvB;AAAA;AAAA,MAGNU,MAHM;AAAA,MAGEC,SAHF;;AAAA,mBAISX,QAAQ,CAC5B,iDAD4B,CAJjB;AAAA;AAAA,MAINY,GAJM;AAAA,MAIDC,MAJC;;AAQbZ,EAAAA,SAAS,CACP,YAAM;AACJ,QAAMa,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACKX,KAAK,EACxB;AACA;AAFwB,oEAGqBO,MAHrB,EADV;;AAAA;AACVK,gBAAAA,MADU;AAOhBC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAR,gBAAAA,OAAO,CAACQ,MAAM,CAACT,IAAR,CAAP;;AARgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAATQ,SAAS;AAAA;AAAA;AAAA,OAAf;;AAWAA,IAAAA,SAAS;AACV,GAdM,EAeP,CAACJ,MAAD,CAfO,CAAT;AAkBA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,KAAK,EAAEF,KAFT;AAGE,IAAA,QAAQ,EAAE,kBAAAU,KAAK;AAAA,aAAIT,QAAQ,CAACS,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAZ;AAAA,KAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAE;AAAA,aAAMT,SAAS,CAACH,KAAD,CAAf;AAAA,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,IAAI,CAACD,IAAL,CAAUgB,GAAV,CAAc,UAAAC,IAAI;AAAA,WACjB;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,IAAI,EAAED,IAAI,CAACV,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoBU,IAAI,CAACE,KAAzB,CADF,CADiB;AAAA,GAAlB,CADH,CATF,CADF;AAmBD;;AAED,IAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB;AACAzB,QAAQ,CAAC0B,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBH,WAAzB","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\n\nimport './styles.css';\n\nfunction App() {\n  const [data, setData] = useState({ hits: [] });\n  const [query, setQuery] = useState('redux');\n  const [search, setSearch] = useState('redux');\n  const [url, setUrl] = useState(\n    'http://hn.algolia.com/api/v1/search?query=redux'\n  );\n\n  useEffect(\n    () => {\n      const fetchData = async () => {\n        const result = await axios(\n          // 'http://hn.algolia.com/api/v1/search?query=redux'\n          // `http://hn.algolia.com/api/v1/search?query=${query}`\n          `http://hn.algolia.com/api/v1/search?query=${search}`\n        );\n\n        console.log(result);\n        setData(result.data);\n      };\n\n      fetchData();\n    },\n    [search]\n  );\n\n  return (\n    <Fragment>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={event => setQuery(event.target.value)}\n      />\n      <button type=\"button\" onClick={() => setSearch(query)}>\n        Search\n      </button>\n      <ul>\n        {data.hits.map(item => (\n          <li key={item.objectID}>\n            <a href={item.url}>{item.title}</a>\n          </li>\n        ))}\n      </ul>\n    </Fragment>\n  );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}